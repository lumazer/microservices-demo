# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  tests:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Удаляем проверочный namespace (он восстановится с помощью self-heal опции Argo CD)
      - name: Delete test store namespace
        run: |
          sudo kubectl delete namespaces online-boutique && sleep 180
      - name: Wait For Pods
        timeout-minutes: 20
        run: |
          set -x
          sudo kubectl wait --for=condition=available --timeout=1000s deployment/redis-cart -n online-boutique
          sudo kubectl wait --for=condition=available --timeout=1000s deployment/adservice -n online-boutique
          sudo kubectl wait --for=condition=available --timeout=1000s deployment/cartservice -n online-boutique
          sudo kubectl wait --for=condition=available --timeout=1000s deployment/checkoutservice -n online-boutique
          sudo kubectl wait --for=condition=available --timeout=1000s deployment/currencyservice -n online-boutique
          sudo kubectl wait --for=condition=available --timeout=1000s deployment/emailservice -n online-boutique
          sudo kubectl wait --for=condition=available --timeout=1000s deployment/frontend -n online-boutique
          sudo kubectl wait --for=condition=available --timeout=1000s deployment/loadgenerator -n online-boutique
          sudo kubectl wait --for=condition=available --timeout=1000s deployment/paymentservice -n online-boutique
          sudo kubectl wait --for=condition=available --timeout=1000s deployment/productcatalogservice -n online-boutique
          sudo kubectl wait --for=condition=available --timeout=1000s deployment/recommendationservice -n online-boutique
          sudo kubectl wait --for=condition=available --timeout=1000s deployment/shippingservice -n online-boutique
      # Проверяем на определённую фразу дважды встречающуюся на фронте
      - name: curl-test frontend
        run: |
          if [ $(curl http://$(sudo kubectl get service -n online-boutique | grep frontend |  awk '{print $3}'):80 | grep "demo purposes only." | wc -l) -gt 1 ]; then true; fi

      # Проверяем процентаж ошибок приложения loadgenerator
      - name: Smoke Test
        run: |
          set -x
          # Удаляем под loadgenerator
          sudo kubectl delete pod -l app=loadgenerator -n online-boutique
          # Ждём, пока под loadgenerator поднимется и нагенерирует нагрузку в объёме 50 заказов
          REQUEST_COUNT="0"
          while [[ "$REQUEST_COUNT"  -lt "50"  ]]; do
              sleep 5
              REQUEST_COUNT=$(sudo kubectl logs -l app=loadgenerator -n online-boutique | grep Aggregated | awk '{print $2}')
          done
          # Проверяем процентаж ошибок
          if [[ "$(sudo kubectl logs -l app=loadgenerator -n online-boutique | grep Aggregated | awk '{print $3}' | sed "s/[(][^)]*[)]//g")" -gt "0" ]]; then exit 1; else exit 0; fi
      - name: Run for prod
        run: |
          if [[ sudo kubectl create ns online-boutique-prod ]]; then exit 0; else exit 0; fi 
          cd ~/git/microservices-demo
          git pull
          sudo kubectl apply -n online-boutique-prod -f ~/git/microservices-demo/app/online-boutique-kubernetes-manifests.yaml
          sudo kubectl apply -n online-boutique-prod -f https://raw.githubusercontent.com/lumazer/kubernetes_cluster/main/online-boutique-prod/online-boutique-prod-tls-secret.yaml
          sudo kubectl apply -n online-boutique-prod -f https://raw.githubusercontent.com/lumazer/kubernetes_cluster/main/online-boutique-prod/online-boutique-prod-ingress.yaml
